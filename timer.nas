[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_store_eflags
	EXTERN	_io_out8
	EXTERN	_task_timer
	EXTERN	_fifo32_put
	EXTERN	_task_switch
[FILE "timer.c"]
[SECTION .text]
	GLOBAL	_timer_settime
_timer_settime:
	PUSH	EBP
	MOV	EAX,DWORD [_timerctl]
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ECX,DWORD [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	ADD	EAX,ECX
	MOV	DWORD [4+EBX],EAX
	MOV	DWORD [8+EBX],2
	CALL	_io_load_eflags
	MOV	ESI,EAX
	CALL	_io_cli
	MOV	EAX,DWORD [_timerctl+8]
	MOV	EDX,DWORD [4+EBX]
	CMP	EDX,DWORD [4+EAX]
	JBE	L8
L3:
	MOV	ECX,EAX
	MOV	EAX,DWORD [EAX]
	CMP	EDX,DWORD [4+EAX]
	JA	L3
	MOV	DWORD [ECX],EBX
	MOV	DWORD [EBX],EAX
L7:
	MOV	DWORD [8+EBP],ESI
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_io_store_eflags
L8:
	MOV	DWORD [EBX],EAX
	MOV	DWORD [_timerctl+4],EDX
	MOV	DWORD [_timerctl+8],EBX
	JMP	L7
	GLOBAL	_init_pit
_init_pit:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,16
	PUSH	52
	PUSH	67
	CALL	_io_out8
	POP	ECX
	POP	EAX
	PUSH	156
	PUSH	64
	CALL	_io_out8
	POP	EAX
	POP	EDX
	PUSH	46
	PUSH	64
	CALL	_io_out8
	MOV	EAX,499
	MOV	DWORD [_timerctl],0
	ADD	ESP,16
	MOV	EDX,_timerctl+20
L14:
	MOV	DWORD [EDX],0
	ADD	EDX,20
	DEC	EAX
	JNS	L14
	XOR	EAX,EAX
	XOR	EDX,EDX
L21:
	MOV	ECX,DWORD [_timerctl+20+EDX]
	TEST	ECX,ECX
	JE	L26
	INC	EAX
	ADD	EDX,20
	CMP	EAX,499
	JLE	L21
	XOR	EAX,EAX
L20:
	MOV	DWORD [4+EAX],-1
	MOV	DWORD [8+EAX],2
	MOV	DWORD [EAX],0
	MOV	DWORD [_timerctl+8],EAX
	MOV	DWORD [_timerctl+4],-1
	LEAVE
	RET
L26:
	LEA	EAX,DWORD [_timerctl+12+EDX]
	MOV	DWORD [_timerctl+20+EDX],1
	JMP	L20
	GLOBAL	_timer_alloc
_timer_alloc:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	MOV	EAX,_timerctl+12
	XOR	EDX,EDX
L33:
	CMP	DWORD [_timerctl+20+EDX],0
	JE	L36
	INC	ECX
	ADD	EAX,20
	ADD	EDX,20
	CMP	ECX,499
	JLE	L33
	XOR	EAX,EAX
L27:
	POP	EBP
	RET
L36:
	MOV	DWORD [_timerctl+20+EDX],1
	JMP	L27
	GLOBAL	_timer_free
_timer_free:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [8+EAX],0
	POP	EBP
	RET
	GLOBAL	_timer_init
_timer_init:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	DWORD [12+EAX],ECX
	MOV	ECX,DWORD [16+EBP]
	MOV	DWORD [16+EAX],ECX
	POP	EBP
	RET
	GLOBAL	_inthandler20
_inthandler20:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	EBX
	PUSH	EBX
	PUSH	96
	PUSH	32
	CALL	_io_out8
	ADD	ESP,16
	MOV	EAX,DWORD [_timerctl]
	INC	EAX
	MOV	DWORD [_timerctl],EAX
	CMP	DWORD [_timerctl+4],EAX
	JA	L39
	XOR	ESI,ESI
	MOV	EBX,DWORD [_timerctl+8]
L41:
	MOV	EAX,DWORD [4+EBX]
	CMP	EAX,DWORD [_timerctl]
	JA	L42
	MOV	DWORD [8+EBX],1
	CMP	EBX,DWORD [_task_timer]
	JE	L45
	PUSH	ECX
	PUSH	ECX
	MOV	EAX,DWORD [16+EBX]
	PUSH	EAX
	MOV	EAX,DWORD [12+EBX]
	PUSH	EAX
	CALL	_fifo32_put
	ADD	ESP,16
L46:
	MOV	EBX,DWORD [EBX]
	JMP	L41
L45:
	MOV	ESI,1
	JMP	L46
L42:
	MOV	EDX,ESI
	MOV	DWORD [_timerctl+8],EBX
	MOV	DWORD [_timerctl+4],EAX
	TEST	DL,DL
	JNE	L48
L39:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L48:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_task_switch
	GLOBAL	_timerctl
[SECTION .data]
	ALIGNB	16
_timerctl:
	RESB	10012
